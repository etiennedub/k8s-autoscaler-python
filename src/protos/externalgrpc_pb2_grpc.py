# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import externalgrpc_pb2 as externalgrpc__pb2


class CloudProviderStub(object):
    """CloudProvider specific RPC functions
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.NodeGroups = channel.unary_unary(
                '/clusterautoscaler.cloudprovider.v1.externalgrpc.CloudProvider/NodeGroups',
                request_serializer=externalgrpc__pb2.NodeGroupsRequest.SerializeToString,
                response_deserializer=externalgrpc__pb2.NodeGroupsResponse.FromString,
                )
        self.NodeGroupForNode = channel.unary_unary(
                '/clusterautoscaler.cloudprovider.v1.externalgrpc.CloudProvider/NodeGroupForNode',
                request_serializer=externalgrpc__pb2.NodeGroupForNodeRequest.SerializeToString,
                response_deserializer=externalgrpc__pb2.NodeGroupForNodeResponse.FromString,
                )
        self.PricingNodePrice = channel.unary_unary(
                '/clusterautoscaler.cloudprovider.v1.externalgrpc.CloudProvider/PricingNodePrice',
                request_serializer=externalgrpc__pb2.PricingNodePriceRequest.SerializeToString,
                response_deserializer=externalgrpc__pb2.PricingNodePriceResponse.FromString,
                )
        self.PricingPodPrice = channel.unary_unary(
                '/clusterautoscaler.cloudprovider.v1.externalgrpc.CloudProvider/PricingPodPrice',
                request_serializer=externalgrpc__pb2.PricingPodPriceRequest.SerializeToString,
                response_deserializer=externalgrpc__pb2.PricingPodPriceResponse.FromString,
                )
        self.GPULabel = channel.unary_unary(
                '/clusterautoscaler.cloudprovider.v1.externalgrpc.CloudProvider/GPULabel',
                request_serializer=externalgrpc__pb2.GPULabelRequest.SerializeToString,
                response_deserializer=externalgrpc__pb2.GPULabelResponse.FromString,
                )
        self.GetAvailableGPUTypes = channel.unary_unary(
                '/clusterautoscaler.cloudprovider.v1.externalgrpc.CloudProvider/GetAvailableGPUTypes',
                request_serializer=externalgrpc__pb2.GetAvailableGPUTypesRequest.SerializeToString,
                response_deserializer=externalgrpc__pb2.GetAvailableGPUTypesResponse.FromString,
                )
        self.Cleanup = channel.unary_unary(
                '/clusterautoscaler.cloudprovider.v1.externalgrpc.CloudProvider/Cleanup',
                request_serializer=externalgrpc__pb2.CleanupRequest.SerializeToString,
                response_deserializer=externalgrpc__pb2.CleanupResponse.FromString,
                )
        self.Refresh = channel.unary_unary(
                '/clusterautoscaler.cloudprovider.v1.externalgrpc.CloudProvider/Refresh',
                request_serializer=externalgrpc__pb2.RefreshRequest.SerializeToString,
                response_deserializer=externalgrpc__pb2.RefreshResponse.FromString,
                )
        self.NodeGroupTargetSize = channel.unary_unary(
                '/clusterautoscaler.cloudprovider.v1.externalgrpc.CloudProvider/NodeGroupTargetSize',
                request_serializer=externalgrpc__pb2.NodeGroupTargetSizeRequest.SerializeToString,
                response_deserializer=externalgrpc__pb2.NodeGroupTargetSizeResponse.FromString,
                )
        self.NodeGroupIncreaseSize = channel.unary_unary(
                '/clusterautoscaler.cloudprovider.v1.externalgrpc.CloudProvider/NodeGroupIncreaseSize',
                request_serializer=externalgrpc__pb2.NodeGroupIncreaseSizeRequest.SerializeToString,
                response_deserializer=externalgrpc__pb2.NodeGroupIncreaseSizeResponse.FromString,
                )
        self.NodeGroupDeleteNodes = channel.unary_unary(
                '/clusterautoscaler.cloudprovider.v1.externalgrpc.CloudProvider/NodeGroupDeleteNodes',
                request_serializer=externalgrpc__pb2.NodeGroupDeleteNodesRequest.SerializeToString,
                response_deserializer=externalgrpc__pb2.NodeGroupDeleteNodesResponse.FromString,
                )
        self.NodeGroupDecreaseTargetSize = channel.unary_unary(
                '/clusterautoscaler.cloudprovider.v1.externalgrpc.CloudProvider/NodeGroupDecreaseTargetSize',
                request_serializer=externalgrpc__pb2.NodeGroupDecreaseTargetSizeRequest.SerializeToString,
                response_deserializer=externalgrpc__pb2.NodeGroupDecreaseTargetSizeResponse.FromString,
                )
        self.NodeGroupNodes = channel.unary_unary(
                '/clusterautoscaler.cloudprovider.v1.externalgrpc.CloudProvider/NodeGroupNodes',
                request_serializer=externalgrpc__pb2.NodeGroupNodesRequest.SerializeToString,
                response_deserializer=externalgrpc__pb2.NodeGroupNodesResponse.FromString,
                )
        self.NodeGroupTemplateNodeInfo = channel.unary_unary(
                '/clusterautoscaler.cloudprovider.v1.externalgrpc.CloudProvider/NodeGroupTemplateNodeInfo',
                request_serializer=externalgrpc__pb2.NodeGroupTemplateNodeInfoRequest.SerializeToString,
                response_deserializer=externalgrpc__pb2.NodeGroupTemplateNodeInfoResponse.FromString,
                )
        self.NodeGroupGetOptions = channel.unary_unary(
                '/clusterautoscaler.cloudprovider.v1.externalgrpc.CloudProvider/NodeGroupGetOptions',
                request_serializer=externalgrpc__pb2.NodeGroupAutoscalingOptionsRequest.SerializeToString,
                response_deserializer=externalgrpc__pb2.NodeGroupAutoscalingOptionsResponse.FromString,
                )


class CloudProviderServicer(object):
    """CloudProvider specific RPC functions
    """

    def NodeGroups(self, request, context):
        """NodeGroups returns all node groups configured for this cloud provider.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NodeGroupForNode(self, request, context):
        """NodeGroupForNode returns the node group for the given node.
        The node group id is an empty string if the node should not
        be processed by cluster autoscaler.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PricingNodePrice(self, request, context):
        """PricingNodePrice returns a theoretical minimum price of running a node for
        a given period of time on a perfectly matching machine.
        Implementation optional: if unimplemented return error code 12 (for `Unimplemented`)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PricingPodPrice(self, request, context):
        """PricingPodPrice returns a theoretical minimum price of running a pod for a given
        period of time on a perfectly matching machine.
        Implementation optional: if unimplemented return error code 12 (for `Unimplemented`)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GPULabel(self, request, context):
        """GPULabel returns the label added to nodes with GPU resource.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAvailableGPUTypes(self, request, context):
        """GetAvailableGPUTypes return all available GPU types cloud provider supports.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Cleanup(self, request, context):
        """Cleanup cleans up open resources before the cloud provider is destroyed, i.e. go routines etc.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Refresh(self, request, context):
        """Refresh is called before every main loop and can be used to dynamically update cloud provider state.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NodeGroupTargetSize(self, request, context):
        """NodeGroup specific RPC functions

        NodeGroupTargetSize returns the current target size of the node group. It is possible
        that the number of nodes in Kubernetes is different at the moment but should be equal
        to the size of a node group once everything stabilizes (new nodes finish startup and
        registration or removed nodes are deleted completely).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NodeGroupIncreaseSize(self, request, context):
        """NodeGroupIncreaseSize increases the size of the node group. To delete a node you need
        to explicitly name it and use NodeGroupDeleteNodes. This function should wait until
        node group size is updated.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NodeGroupDeleteNodes(self, request, context):
        """NodeGroupDeleteNodes deletes nodes from this node group (and also decreasing the size
        of the node group with that). Error is returned either on failure or if the given node
        doesn't belong to this node group. This function should wait until node group size is updated.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NodeGroupDecreaseTargetSize(self, request, context):
        """NodeGroupDecreaseTargetSize decreases the target size of the node group. This function
        doesn't permit to delete any existing node and can be used only to reduce the request
        for new nodes that have not been yet fulfilled. Delta should be negative. It is assumed
        that cloud provider will not delete the existing nodes if the size when there is an option
        to just decrease the target.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NodeGroupNodes(self, request, context):
        """NodeGroupNodes returns a list of all nodes that belong to this node group.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NodeGroupTemplateNodeInfo(self, request, context):
        """NodeGroupTemplateNodeInfo returns a structure of an empty (as if just started) node,
        with all of the labels, capacity and allocatable information. This will be used in
        scale-up simulations to predict what would a new node look like if a node group was expanded.
        Implementation optional: if unimplemented return error code 12 (for `Unimplemented`)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NodeGroupGetOptions(self, request, context):
        """GetOptions returns NodeGroupAutoscalingOptions that should be used for this particular
        NodeGroup.
        Implementation optional: if unimplemented return error code 12 (for `Unimplemented`)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CloudProviderServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'NodeGroups': grpc.unary_unary_rpc_method_handler(
                    servicer.NodeGroups,
                    request_deserializer=externalgrpc__pb2.NodeGroupsRequest.FromString,
                    response_serializer=externalgrpc__pb2.NodeGroupsResponse.SerializeToString,
            ),
            'NodeGroupForNode': grpc.unary_unary_rpc_method_handler(
                    servicer.NodeGroupForNode,
                    request_deserializer=externalgrpc__pb2.NodeGroupForNodeRequest.FromString,
                    response_serializer=externalgrpc__pb2.NodeGroupForNodeResponse.SerializeToString,
            ),
            'PricingNodePrice': grpc.unary_unary_rpc_method_handler(
                    servicer.PricingNodePrice,
                    request_deserializer=externalgrpc__pb2.PricingNodePriceRequest.FromString,
                    response_serializer=externalgrpc__pb2.PricingNodePriceResponse.SerializeToString,
            ),
            'PricingPodPrice': grpc.unary_unary_rpc_method_handler(
                    servicer.PricingPodPrice,
                    request_deserializer=externalgrpc__pb2.PricingPodPriceRequest.FromString,
                    response_serializer=externalgrpc__pb2.PricingPodPriceResponse.SerializeToString,
            ),
            'GPULabel': grpc.unary_unary_rpc_method_handler(
                    servicer.GPULabel,
                    request_deserializer=externalgrpc__pb2.GPULabelRequest.FromString,
                    response_serializer=externalgrpc__pb2.GPULabelResponse.SerializeToString,
            ),
            'GetAvailableGPUTypes': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAvailableGPUTypes,
                    request_deserializer=externalgrpc__pb2.GetAvailableGPUTypesRequest.FromString,
                    response_serializer=externalgrpc__pb2.GetAvailableGPUTypesResponse.SerializeToString,
            ),
            'Cleanup': grpc.unary_unary_rpc_method_handler(
                    servicer.Cleanup,
                    request_deserializer=externalgrpc__pb2.CleanupRequest.FromString,
                    response_serializer=externalgrpc__pb2.CleanupResponse.SerializeToString,
            ),
            'Refresh': grpc.unary_unary_rpc_method_handler(
                    servicer.Refresh,
                    request_deserializer=externalgrpc__pb2.RefreshRequest.FromString,
                    response_serializer=externalgrpc__pb2.RefreshResponse.SerializeToString,
            ),
            'NodeGroupTargetSize': grpc.unary_unary_rpc_method_handler(
                    servicer.NodeGroupTargetSize,
                    request_deserializer=externalgrpc__pb2.NodeGroupTargetSizeRequest.FromString,
                    response_serializer=externalgrpc__pb2.NodeGroupTargetSizeResponse.SerializeToString,
            ),
            'NodeGroupIncreaseSize': grpc.unary_unary_rpc_method_handler(
                    servicer.NodeGroupIncreaseSize,
                    request_deserializer=externalgrpc__pb2.NodeGroupIncreaseSizeRequest.FromString,
                    response_serializer=externalgrpc__pb2.NodeGroupIncreaseSizeResponse.SerializeToString,
            ),
            'NodeGroupDeleteNodes': grpc.unary_unary_rpc_method_handler(
                    servicer.NodeGroupDeleteNodes,
                    request_deserializer=externalgrpc__pb2.NodeGroupDeleteNodesRequest.FromString,
                    response_serializer=externalgrpc__pb2.NodeGroupDeleteNodesResponse.SerializeToString,
            ),
            'NodeGroupDecreaseTargetSize': grpc.unary_unary_rpc_method_handler(
                    servicer.NodeGroupDecreaseTargetSize,
                    request_deserializer=externalgrpc__pb2.NodeGroupDecreaseTargetSizeRequest.FromString,
                    response_serializer=externalgrpc__pb2.NodeGroupDecreaseTargetSizeResponse.SerializeToString,
            ),
            'NodeGroupNodes': grpc.unary_unary_rpc_method_handler(
                    servicer.NodeGroupNodes,
                    request_deserializer=externalgrpc__pb2.NodeGroupNodesRequest.FromString,
                    response_serializer=externalgrpc__pb2.NodeGroupNodesResponse.SerializeToString,
            ),
            'NodeGroupTemplateNodeInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.NodeGroupTemplateNodeInfo,
                    request_deserializer=externalgrpc__pb2.NodeGroupTemplateNodeInfoRequest.FromString,
                    response_serializer=externalgrpc__pb2.NodeGroupTemplateNodeInfoResponse.SerializeToString,
            ),
            'NodeGroupGetOptions': grpc.unary_unary_rpc_method_handler(
                    servicer.NodeGroupGetOptions,
                    request_deserializer=externalgrpc__pb2.NodeGroupAutoscalingOptionsRequest.FromString,
                    response_serializer=externalgrpc__pb2.NodeGroupAutoscalingOptionsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'clusterautoscaler.cloudprovider.v1.externalgrpc.CloudProvider', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CloudProvider(object):
    """CloudProvider specific RPC functions
    """

    @staticmethod
    def NodeGroups(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/clusterautoscaler.cloudprovider.v1.externalgrpc.CloudProvider/NodeGroups',
            externalgrpc__pb2.NodeGroupsRequest.SerializeToString,
            externalgrpc__pb2.NodeGroupsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NodeGroupForNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/clusterautoscaler.cloudprovider.v1.externalgrpc.CloudProvider/NodeGroupForNode',
            externalgrpc__pb2.NodeGroupForNodeRequest.SerializeToString,
            externalgrpc__pb2.NodeGroupForNodeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PricingNodePrice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/clusterautoscaler.cloudprovider.v1.externalgrpc.CloudProvider/PricingNodePrice',
            externalgrpc__pb2.PricingNodePriceRequest.SerializeToString,
            externalgrpc__pb2.PricingNodePriceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PricingPodPrice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/clusterautoscaler.cloudprovider.v1.externalgrpc.CloudProvider/PricingPodPrice',
            externalgrpc__pb2.PricingPodPriceRequest.SerializeToString,
            externalgrpc__pb2.PricingPodPriceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GPULabel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/clusterautoscaler.cloudprovider.v1.externalgrpc.CloudProvider/GPULabel',
            externalgrpc__pb2.GPULabelRequest.SerializeToString,
            externalgrpc__pb2.GPULabelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAvailableGPUTypes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/clusterautoscaler.cloudprovider.v1.externalgrpc.CloudProvider/GetAvailableGPUTypes',
            externalgrpc__pb2.GetAvailableGPUTypesRequest.SerializeToString,
            externalgrpc__pb2.GetAvailableGPUTypesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Cleanup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/clusterautoscaler.cloudprovider.v1.externalgrpc.CloudProvider/Cleanup',
            externalgrpc__pb2.CleanupRequest.SerializeToString,
            externalgrpc__pb2.CleanupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Refresh(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/clusterautoscaler.cloudprovider.v1.externalgrpc.CloudProvider/Refresh',
            externalgrpc__pb2.RefreshRequest.SerializeToString,
            externalgrpc__pb2.RefreshResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NodeGroupTargetSize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/clusterautoscaler.cloudprovider.v1.externalgrpc.CloudProvider/NodeGroupTargetSize',
            externalgrpc__pb2.NodeGroupTargetSizeRequest.SerializeToString,
            externalgrpc__pb2.NodeGroupTargetSizeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NodeGroupIncreaseSize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/clusterautoscaler.cloudprovider.v1.externalgrpc.CloudProvider/NodeGroupIncreaseSize',
            externalgrpc__pb2.NodeGroupIncreaseSizeRequest.SerializeToString,
            externalgrpc__pb2.NodeGroupIncreaseSizeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NodeGroupDeleteNodes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/clusterautoscaler.cloudprovider.v1.externalgrpc.CloudProvider/NodeGroupDeleteNodes',
            externalgrpc__pb2.NodeGroupDeleteNodesRequest.SerializeToString,
            externalgrpc__pb2.NodeGroupDeleteNodesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NodeGroupDecreaseTargetSize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/clusterautoscaler.cloudprovider.v1.externalgrpc.CloudProvider/NodeGroupDecreaseTargetSize',
            externalgrpc__pb2.NodeGroupDecreaseTargetSizeRequest.SerializeToString,
            externalgrpc__pb2.NodeGroupDecreaseTargetSizeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NodeGroupNodes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/clusterautoscaler.cloudprovider.v1.externalgrpc.CloudProvider/NodeGroupNodes',
            externalgrpc__pb2.NodeGroupNodesRequest.SerializeToString,
            externalgrpc__pb2.NodeGroupNodesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NodeGroupTemplateNodeInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/clusterautoscaler.cloudprovider.v1.externalgrpc.CloudProvider/NodeGroupTemplateNodeInfo',
            externalgrpc__pb2.NodeGroupTemplateNodeInfoRequest.SerializeToString,
            externalgrpc__pb2.NodeGroupTemplateNodeInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NodeGroupGetOptions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/clusterautoscaler.cloudprovider.v1.externalgrpc.CloudProvider/NodeGroupGetOptions',
            externalgrpc__pb2.NodeGroupAutoscalingOptionsRequest.SerializeToString,
            externalgrpc__pb2.NodeGroupAutoscalingOptionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
